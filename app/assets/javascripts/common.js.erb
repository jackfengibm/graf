
SINGLE_SELECT_OPTIONS = {multiple: false, header: "", minWidth: 130, noneSelectedText:"Pick an option", selectedList: 1 }
MULTI_SELECT_OPTIONS = {noneSelectedText: "All", minWidth: 130, selectedList: 4} 

var allowDataRefresh = true;

//
// Variable Name Manipulation
//
function toDash(input) {
  return input.replace(/([A-Z])/g, function($1){return "-"+$1.toLowerCase();});
}

function toUnderscore(input) {
  return input.replace(/([A-Z])/g, function($1){return "_"+$1.toLowerCase();});
}

//
// Date Functions
//
function utcToLocal(input) {
  return new Date("2012-11-29 17:00:34 UTC");
}

function convertToDate(time) {
  timestamp = time //* 1000
  var newDate = new Date(timestamp);
  var month = newDate.getMonth() + 1;
  var year = newDate.getYear() + 1900;
  date = month + "/" + year
  return date;
}

// function rubyUTCDateToLocal(rubyDate){
//   // Sample Input: 2014-03-27T05:31:33.000Z
//   date = rubyDate.substring(0, 10)
//   time = rubyDate.substring(11, 22)
//   //return date + " " + time + " UTC"
//   return new Date(date + " " + time + " PM UTC")
// }


//
// Timer Functions
//
var startTimerTime = null;
function startTimer() {
  startTimerTime = new Date();
}

function endTimer() {
  var endTimerTime = new Date();
  var resultTimeStr = (endTimerTime - startTimerTime)/1000 + "s";
  console.log("Timer time: " + resultTimeStr);
  return resultTimeStr;
}

function destroyClickedElement(event) {
  document.body.removeChild(event.target);
}


function downloadCSV(result) {
  var CSV = result;
  window.URL = window.webkitURL || window.URL;
  var contentType = 'text/csv';
  var csvFile = new Blob([CSV], {type: contentType});
  var a = document.createElement('a');
  a.download = 'graf_output.csv';
  a.href = window.URL.createObjectURL(csvFile);
  //a.textContent = 'Download CSV';
  a.onclick = destroyClickedElement;
  a.dataset.downloadurl = [contentType, a.download, a.href];
  document.body.appendChild(a);
  a.click();
}

function showTooltip(x, y, contents, z) {
  $('<div id="flot-tooltip">' + contents + '</div>').css({
      top: y - 30,
      left: x - 135,
      'border-color': z,
  }).appendTo("body").fadeIn(200);
}


function bindToNode(node_id){
  $(node_id).bind("plothover", function (event, pos, item) {
    if (item) {
      if ((previousPoint != item.dataIndex) || (previousLabel != item.series.label)) {
        previousPoint = item.dataIndex;
        previousLabel = item.series.label;

        $("#flot-tooltip").remove();

        var x = convertToDate(item.datapoint[0]),
        y = item.datapoint[1];
        z = item.series.color;

        showTooltip(item.pageX, item.pageY,
            "<b>" + item.series.label + "</b><br /> " + x + " : " + y ,
            z);
      }
    }
    else {
        $("#flot-tooltip").remove();
        previousPoint = null;
    }
  });
}

function restrictGroupBys() {
  // allowDataRefresh param false to prevent any data refreshes from happening until done
  allowDataRefresh = false;

  // Restrict the group by
  var validGroupBys = METRICS.base_metrics[METRICS.metrics[$("#metric_filter").val()].base_metric].group_by;

  if ( validGroupBys.indexOf($("#group_by_filter").val()) < 0) {
    $("#group_by_filter").val(validGroupBys[0]);
  }
  $(function() {
    $("#group_by_filter option").each(function(i){
      var indexOf = validGroupBys.indexOf($(this).val());
      if (indexOf >= 0) {
        // Enable
        enableGroupBy($(this).val());
      }
      else {
        // Disable
        disableGroupBy($(this).val());
      }
    });
  });
  // Refresh the group by filter
  $("#group_by_filter").multiselect(SINGLE_SELECT_OPTIONS).multiselect('refresh');

  // re-enabling data refreshing
  allowDataRefresh = true;
}

function common_populateTable(node_id, dtID, options, result) {
  $(node_id).empty();
  var canonicalResult = result.replace('<table id="metric_table">', '<table id="' + dtID + '" style="width:448px;">');
  canonicalResult = canonicalResult.replace(/<thead>/g, '<thead style="width:100%;">');
  canonicalResult = canonicalResult.replace(/<tbody>/g, '<tbody style="width:100%;">');
  $(node_id).html(canonicalResult);
  var table = $("#" + dtID).dataTable(options);

  // TODO, this is probably in the wrong place
  $("#" + dtID + " tbody").on( 'click', 'tr', function(){
    var id = metric.fnGetData(this)[0];
    // TODO, find a way to convert HTML entities back to plaintext
    //console.log(String.fromCharCode(id));
    console.log(id); 
    $("#" + $("#group_by_filter").val() + "_filter").val(id)
    storeFiltersToLocalStorage() 
    window.location.assign('/report')
  });
  return table;
}

function updateChart(nodeId, viewType, options, result) {
  $(nodeId).empty();
  
  if (result.response.length == 0) {
    data = [{ label: "No Pull Requests", data: 1, color:'#E0E0E0' }];
  }
  else {
    data = result.response;
  }


  if (viewType == "pie") {
    options = options;
  }
  else if (viewType == "bar") {
    result = parsePieToBar(data);
    var data = result.data;
    var options = result.options;
  }
  else {
    options = LINE_OPTIONS;
  }

  $.plot($(nodeId), data, options);
}